// Auto-generated by https://github.com/react-spring/gltfjsx

import * as THREE from "three"
import React, { FC, useEffect, useRef, useState } from "react"
import { useThree, useFrame, BoneProps } from "@react-three/fiber"
import { getMouseDegrees } from "./utils"
import { Bone, MathUtils, Object3D, SkinnedMesh, Texture } from "three"
import { useGLTF, useTexture } from "@react-three/drei"
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader"

type Mouse = { x: number, y: number }
function moveJoint(mouse: Mouse, joint: Bone) {
  joint.rotation.x = Math.random() * 3.14
  joint.rotation.y = Math.random() * 3.14
}

const Model: FC = ({ ...props }) => {
  const group = useRef()
  const { nodes, animations } = useGLTF("/dancer.glb") as GLTF & { nodes: { [e in string]: (Object3D | Bone | SkinnedMesh) } }
  const stacy = nodes["Beta_Surface"] as SkinnedMesh
  const texture = useTexture('stacy.jpg')
  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer(undefined as unknown as Object3D))
  useFrame((state, delta) => mixer.update(delta))

  const { size } = useThree()
  useFrame((state, delta) => {
    const mouse = { x: size.width / 2 + (state.mouse.x * size.width) / 2, y: size.height / 2 + (-state.mouse.y * size.height) / 2 }
    mixer.update(delta)
    moveJoint(mouse, nodes.mixamorigNeck as Bone)
    moveJoint(mouse, nodes.mixamorigSpine as Bone)
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[0, 0, 0]}>
        <primitive object={nodes["mixamorigHips"]} />
        <skinnedMesh receiveShadow castShadow geometry={stacy.geometry} skeleton={stacy.skeleton}>
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
    </group>
  )
}
export default Model
